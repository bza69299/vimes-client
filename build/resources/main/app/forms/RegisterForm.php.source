<?php
namespace app\forms;

use php\gui\framework\AbstractForm;
use php\gui\event\UXEvent; 


class RegisterForm extends AbstractForm
{

	/**
	 * @event okButton.action 
	 **/
	function doOkButtonAction(UXEvent $event = null)
	{	
		// тримим email и login, чтобы вокруг не было пробелов.
		$email = str::trim($this->emailEdit->text);
		$login = str::trim($this->loginEdit->text);
		$password = $this->passwordEdit->text;

		// Проверяем введенные данные.
		if (str::length($login) < 3) {
			UXDialog::show('Введите корректный логин', 'ERROR');
			return;
		}

		if (!str::contains($email, '@') || str::length($email) < 3) {
			UXDialog::show('Введите корректный email адрес', 'ERROR');
			return;
		}
		
		if (str::length($password) < 5) {
			UXDialog::show('Пароль слишком короткий, минимум 5 символов', 'ERROR');
			return;
		}

		// используем методы для работы с пользователями из MainModule.
		if ($this->getUser($login)) {
			UXDialog::show('Данный логин уже занят', 'ERROR'); 
		} elseif ($this->getUserByEmail($email)) {
			UXDialog::show('Данный email уже занят', 'ERROR');
		} else {
			$success = $this->register($login, $email, $password);

			if ($success) {
				$this->hide();				
				$this->form('AuthForm')->login->text = $login;
				alert('Вы успешно зарегистрировались');
			} else {
				UXDialog::show('Ошибка регистрации', 'ERROR');
			}
		}
	}

	/**
	 * @event cancelButton.action 
	 **/
	function doCancelButtonAction(UXEvent $event = null)
	{	
		$this->hide();
	}

}
